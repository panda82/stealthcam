name: Android CI
on:
  push: { branches: ["main"] }
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }
      - uses: android-actions/setup-android@v3
        with: { accept-android-sdk-licenses: true }
      - name: Install SDK 34
        run: |
          set -euxo pipefail
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
      - name: Gradle 8.4
        run: |
          set -euxo pipefail
          v=8.4
          curl -L "https://services.gradle.org/distributions/gradle-${v}-bin.zip" -o gradle.zip
          unzip -q gradle.zip -d "$HOME/gradle"
          echo "$HOME/gradle/gradle-${v}/bin" >> "$GITHUB_PATH"
      - name: Assemble Debug (strict)
        run: |
          set -euxo pipefail
          gradle :app:clean --no-daemon
          # rulăm cu debug + stacktrace, salvăm log-ul complet
          ( gradle :app:assembleDebug --no-daemon --stacktrace --debug || true ) | tee build.log

          # numerotăm liniile din log și extragem fereastra în jurul FAIL-ului
          nl -ba build.log > build.n.log
          FAIL_LINE=$(grep -n "^FAILURE: Build failed" build.n.log | head -n1 | cut -d: -f1 || true)
          if [ -n "$FAIL_LINE" ]; then
            START=$(( FAIL_LINE>200 ? FAIL_LINE-200 : 1 ))
            END=$(( FAIL_LINE+60 ))
            echo "===== ERROR CONTEXT ($START..$END) =====" >> $GITHUB_STEP_SUMMARY
            sed -n "${START},${END}p" build.n.log >> $GITHUB_STEP_SUMMARY
          fi

          echo "===== SEARCH APK =====" >> $GITHUB_STEP_SUMMARY
          find . -type f -name '*.apk' -print | sed 's/^/FOUND: /' >> $GITHUB_STEP_SUMMARY || true
      - name: Upload log + any APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build.log
            build.n.log
            **/*.apk
          if-no-files-found: warn
