name: Android CI
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }

      - uses: android-actions/setup-android@v3
        with: { accept-android-sdk-licenses: true }

      - name: Install SDK (API 34 pref, 35 fallback)
        shell: bash
        run: |
          set -euxo pipefail
          sdkmanager "platform-tools" || true
          sdkmanager "platforms;android-34" || sdkmanager "platforms;android-35" || true
          sdkmanager "build-tools;34.0.0"  || sdkmanager "build-tools;35.0.0"  || true

      - name: Install Gradle 8.4
        shell: bash
        run: |
          set -euxo pipefail
          v=8.4
          curl -L "https://services.gradle.org/distributions/gradle-${v}-bin.zip" -o gradle.zip
          unzip -q gradle.zip -d "$HOME/gradle"
          echo "$HOME/gradle/gradle-${v}/bin" >> "$GITHUB_PATH"
          gradle --version

      - name: Detect :app module
        id: detect
        shell: bash
        run: |
          set -e
          HIT="$(grep -RIl --include=build.gradle --include=build.gradle.kts 'com.android.application' . | head -n1 || true)"
          [ -n "$HIT" ] || { echo "No module with 'com.android.application' found."; exit 1; }
          MOD_DIR="$(dirname "$HIT")"; MOD_REL="${MOD_DIR#./}"; MOD_NAME="${MOD_REL//\//:}"
          echo "module_dir=$MOD_REL"    >> "$GITHUB_OUTPUT"
          echo "module_path=:$MOD_NAME" >> "$GITHUB_OUTPUT"
          echo "Module: $MOD_REL | Gradle path ::$MOD_NAME"

      - name: Build (capture FULL logs)
        shell: bash
        run: |
          set -euxo pipefail
          export GRADLE_OPTS="-Dorg.gradle.console=plain -Dorg.gradle.logging.stacktrace=all"
          ( gradle "${{ steps.detect.outputs.module_path }}:checkDebugAarMetadata" --stacktrace --info --no-daemon --rerun-tasks || true ) | tee build.log
          ( gradle "${{ steps.detect.outputs.module_path }}:assembleDebug"         --stacktrace --info --no-daemon --rerun-tasks || true ) | tee -a build.log
          echo "------ TAIL(build.log) ------"; tail -n 400 build.log || true
          echo "------ EXTRACT: What went wrong ------"
          awk 'f;/^\* What went wrong:/{f=1} /^\* Try:/{exit}' build.log || true
          echo "------ EXTRACT: A failure occurred while executing ------"
          grep -n "A failure occurred while executing" -n build.log || true

      - name: List outputs
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          find . -maxdepth 9 -type f \( -name '*.apk' -o -name '*.aab' \) -print | sed 's/^/FOUND: /' || true
          [ -d "${{ steps.detect.outputs.module_dir }}/build" ] && find "${{ steps.detect.outputs.module_dir }}/build" -maxdepth 6 -type f -print | sed 's/^/BUILDFILE: /' || echo "No module build dir."

      - name: Upload APK/AAB (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ steps.detect.outputs.module_dir }}/build/outputs/apk/**/*.apk
            ${{ steps.detect.outputs.module_dir }}/build/outputs/bundle/**/*.aab
          if-no-files-found: warn

      - name: Upload build.log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: build.log
